{"version":3,"sources":["Request.js","App.js","serviceWorker.js","index.js"],"names":["Request","url","axios","get","result","data","post","React","require","refresh","qId","a","async","Get","response","Character","props","images","index","length","push","src","alt","key","Question","items","console","log","options","JSON","parse","option","type","value","Text","onClick","window","Post","NextQuestionId","optionSelected","question","Window","state","this","setState","Options","className","Component","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAaeA,E,iGAVIC,G,kGACMC,IAAMC,IAAIF,I,cAAzBG,E,yBACCA,G,kEAESH,EAAKI,G,kGACAH,IAAMI,KAAKL,EAAKI,I,cAA/BD,E,yBACCA,G,8CCNLG,EAAQC,EAAQ,GAKtB,SAAeC,EAAQC,GAAvB,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBX,EAAQa,IAAI,aAAeH,IADlD,cACMI,EADN,yBAESA,EAAST,MAFlB,qCASA,SAASU,EAAUC,GAEjB,IADA,IAAIC,EAAS,GACJC,EAAQ,EAAGA,EAAQF,EAAMC,OAAOE,OAAQD,IAC/CD,EAAOG,KAAK,uBAAKC,IAAKL,EAAMC,OAAOC,GAAQI,IAAI,OAAOC,IAAKL,KAE7D,OAAO,2BACJD,GAIL,SAASO,EAASR,GAChB,IAAIS,EAAQ,GACZC,QAAQC,IAAIX,GAGZ,IAFA,IAAIY,EAAUC,KAAKC,MAAMd,EAAMY,SAHR,WAKdV,GACP,IAAIa,EAASH,EAAQV,GACrBO,EAAML,KAAK,yBAAOY,KAAK,SAAST,IAAKL,EAAOe,MAAOF,EAAOG,KAAMC,QAAS,kBAtB7E,SAA8BJ,EAAQK,GAAtC,SAAAzB,EAAAC,OAAA,kEAAAD,EAAA,MACQX,EAAQqC,KAAK,oBAAqBN,IAD1C,OAEEK,EAAO3B,QAAQsB,EAAOO,gBAFxB,qCAsBiFC,CAAeR,EAAQf,EAAMoB,aAFnGlB,EAAQ,EAAGA,EAAQU,EAAQT,OAAQD,IAAS,EAA5CA,GAKT,OACE,2BACE,2BAAMF,EAAMwB,UACZ,2BAAMf,I,IA+CGgB,E,YAxCb,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KACD0B,MAAQ,CACXF,SAAU,UACVZ,QAAS,KACTX,OAAQ,IALO,E,iFASjB0B,KAAKlC,QAAQ,K,8BAEDC,G,oGArDhB,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACeX,EAAQa,IAAI,sBAD3B,8E,cAsDQI,E,0BACaR,EAAQC,I,OAArBL,E,OACJqB,QAAQC,IAAItB,GAEZsC,KAAKC,SAAS,CACZJ,SAAUnC,EAAKmB,SACfI,QAASvB,EAAKwC,QACd5B,OAAQA,I,gFAIV,OACE,2BACE,uBAAK6B,UAAU,aACb,gBAAC/B,EAAD,CAAWE,OAAQ0B,KAAKD,MAAMzB,UAEhC,uBAAK6B,UAAU,WACb,gBAACtB,EAAD,CACEgB,SAAUG,KAAKD,MAAMF,SACrBZ,QAASe,KAAKD,MAAMd,QACpBQ,OAAQO,a,GAjCCpC,EAAMwC,WClCPC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.393ec6b4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nclass Request {\r\n  static async Get(url){\r\n    const result = await axios.get(url);\r\n    return result;\r\n  }\r\n  static async Post(url, data){\r\n    const result = await axios.post(url, data);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Request;\r\n","\r\nimport Request from './Request.js';\r\n\r\nconst React = require('react');\r\n\r\nasync function drawCharacter(){\r\n  return await Request.Get('/character/images');\r\n}\r\nasync function refresh(qId){\r\n  let response = await Request.Get('/question/' + qId);\r\n  return response.data;\r\n}\r\nasync function optionSelected(option, window){\r\n  await Request.Post('/character/update', option);\r\n  window.refresh(option.NextQuestionId);\r\n}\r\n\r\nfunction Character(props) {\r\n  let images = [ ];\r\n  for (let index = 0; index < props.images.length; index++)\r\n    images.push(<img src={props.images[index]} alt=\"test\" key={index} />);\r\n\r\n  return <div>\r\n    {images}\r\n  </div>;\r\n}\r\n\r\nfunction Question(props) {\r\n  let items = [ ];\r\n  console.log(props);\r\n  let options = JSON.parse(props.options);\r\n\r\n  for (let index = 0; index < options.length; index++){\r\n    let option = options[index];\r\n    items.push(<input type='button' key={index} value={option.Text} onClick={()=>optionSelected(option, props.window)}/>)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{props.question}</div>\r\n      <div>{items}</div>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nclass Window extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: \"Loading\",\r\n      options: \"[]\",\r\n      images: []\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.refresh(1);\r\n  }\r\n  async refresh(qId){\r\n    let images = await drawCharacter();\r\n    let data = await refresh(qId);\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      question: data.Question,\r\n      options: data.Options,\r\n      images: images\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"character\">\r\n          <Character images={this.state.images} />\r\n        </div>\r\n        <div className=\"textbox\">\r\n          <Question\r\n            question={this.state.question}\r\n            options={this.state.options}\r\n            window={this}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Window;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}